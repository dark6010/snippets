const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const passportLocalMongoose = require('passport-local-mongoose');
const Account = new Schema({
    username: {       
                      type: String,
                    unique: true,
    },
    password: String,
    email: {
                      type: String,
                    unique: true,
                     match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, "coloca un email valido"]
    },
    celular: {
                      type: String,
                    unique: true,
                     match: [/^\d{8}$/, "coloca un email valido"]
      
    },
    city: String,
    full_name: String,
    creado: { type: Date, default: Date.now },
    modificado: { type: Date, default: Date.now }
});

Account.plugin(passportLocalMongoose);
module.exports = mongoose.model('accounts', Account);

var mongoose = require('mongoose');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var flash = require('connect-flash');



app.use(favicon(__dirname + '/public/favicon.ico'));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(require('express-session')({
    secret: 'ghostmaster',
    resave: false,
    saveUninitialized: false
}));
app.use(passport.initialize());
app.use(flash());
app.use(passport.session());
app.use(express.static(path.join(__dirname, 'public')));

-----------------------------

app.use('/', routes);

// passport config
var Account = require('./models/account');
passport.use(new LocalStrategy(Account.authenticate()));
passport.serializeUser(Account.serializeUser());
passport.deserializeUser(Account.deserializeUser());

// mongoose
mongoose.connect('mongodb://localhost/passport_local_mongoose_express4');

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
    });
}
-----------------------------------------------------
Account.register(new Account({   username: req.body.username, 
                                        email: req.body.email,
                                      celular: req.body.celular,
                                         city: req.body.city,
                                    full_name: req.body.full_name }), req.body.password, function(err, account){
        if (err) {
          datos.error = err.message;
          return res.render('register',  datos );
        }

        passport.authenticate('local')(req, res, function(){
            req.session.save(function(err){
                if (err) {
                    return next(err);
                }
                res.redirect('/');
            });
        });
    });
    
 ----------------------------------------------------------
 https://www.uno-de-piera.com/nodejs-express-4-y-mongoose-servicio-rest/
 https://carlosazaustre.es/blog/como-relacionar-tus-modelos-en-mongodb/
 router.post('/create', function(req, res, next){
	new Curso({
		nombre: req.body.nombre,
	    content: req.body.content,
	    updated_at: Date.now()
	}).save(function(err, curso, count){
	    res.send(curso);
	});
});
router.get('/all', function(req, res, next){
	Curso.find(function( err, cursos, count )
	{
		res.send(cursos);
  	});
});

router.get('/curso/:name', function(req, res, next){
	Curso.findOne({nombre: req.params.name}, function (err, curso) 
	{
		res.send(curso);
	});
});
router.put('/update/:id', function(req, res, next){
	Curso.findOneAndUpdate({_id: req.params.id}, {nombre: req.body.nombre, content: req.body.content})
    .exec(function(err, curso, count)
	{
	    res.send(curso);
	});
});
router.delete('/delete/:id', function(req, res, next){
	Curso.findOneAndRemove({_id: req.params.id})
    .exec(function(err, curso, count)
	{
	    res.send({res:"Success"});
	});
});
------------------------------------------------------------------for populate
var mongoose = require('mongoose');  
var Schema = mongoose.Schema;

var autorSchema = new Schema({  
    nombre: String,
    biografia: String,
    fecha_de_nacimiento: Date,
    nacionalidad: String
});

module.exports = mongoose.model('Autor', autorSchema); 
-------------------------------------------------------------------
var mongoose = require('mongoose');  
var Schema = mongoose.Schema;  
var Autor = mongoose.model('Autor');

var libroSchema = new Schema({  
    titulo: String
    paginas: Number,
    isbn: String,
    autor: { type: Schema.ObjectId, ref: "Autor" } 
});

module.exports = mongoose.model("Libro", libroSchema);
--------------------------------------------------
app.get("/libros", function(req, res) {  
    Libro.find({}, function(err, libros) {
        res.status(200).send(libros)
    });
});
----------------------------------------------------
app.get("/libros", function(req, res) {  
    Libro.find({}, function(err, libros) {
        Autor.populate(libros, {path: "autor"},function(err, libros){
            res.status(200).send(libros);
        }); 
    });
});


var objId = new ObjectId( (param.length < 12) ? "123456789012" : param );
